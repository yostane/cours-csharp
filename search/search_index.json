{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenue au cours \"Langage C# et Framework Dotnet\"","text":"","tags":["introduction"]},{"location":"#introduction","title":"Introduction","text":"<p>C# est une langage de programmation moderne. .Net (prononc\u00e9 dotte nette) est un framework multiplateformes de d\u00e9veloppement d'applications de diff\u00e9rents types:</p> <ul> <li>Des application console</li> <li>Des serveurs web (API, pages g\u00e9n\u00e9r\u00e9es par le serveur) (avec ASP .net)</li> <li>Des sites web g\u00e9n\u00e9r\u00e9s par le serveur (Razor, Blazor server)</li> <li>Des applications web (webapp ou PWA) (Blazor WASM)</li> <li>Des application de bureau ou mobile (MAUI, UWP, WinForms, WPF)</li> </ul> <p>C# et .Net sont maintenus par Microsoft en OpenSource sur GitHub.</p>","tags":["introduction"]},{"location":"#pre-requis","title":"Pr\u00e9-requis","text":"<ul> <li>Installer le SDK .Net.</li> <li>Visual studio Code (VSCode)</li> <li>Extension VSCode C# DevKit.</li> </ul>","tags":["introduction"]},{"location":"#ressources-et-liens-utiles","title":"Ressources et liens utiles","text":"<ul> <li>emojipedia</li> <li>Complete list of github markdown emoji markup</li> <li>mkdocs material</li> </ul>","tags":["introduction"]},{"location":"#license-credits-et-remerciements","title":"License, cr\u00e9dits et remerciements","text":"<ul> <li>Le cours est r\u00e9alis\u00e9 avec MKDocs et Material for MKDocs</li> <li>Ce support de cours est disponible sous licence Creative Commons Attribution 4.0 International (CC BY 4.0)</li> <li>Certaines images sont g\u00e9n\u00e9r\u00e9es via IA (Hotpot.ai)</li> </ul>","tags":["introduction"]},{"location":"asp-dot-net-exercices/","title":"Exercices ASP.NET","text":""},{"location":"asp-dot-net-exercices/#serie-1","title":"S\u00e9rie 1","text":"<ol> <li>Cr\u00e9er un endpoint <code>/pair</code> qui retourne tous les entiers pairs entre 0 et 20<ul> <li>Par exemple, <code>GET /pair</code> retourne <code>[0, 2, 4, 6, 8, 10, ..., 20]</code></li> </ul> </li> <li>Cr\u00e9er un endpoint <code>/pair/{nb}</code> qui retourne tous les entiers pairs entre 0 et nb<ul> <li>Par exemple, <code>GET /pair/10</code> retourne <code>[0, 2, 4, 6, 8, 10]</code></li> </ul> </li> <li>Cr\u00e9er un endpoint <code>/impair/{nb}</code> qui retourne tous les entiers impairs entre 0 et nb<ul> <li>Par exemple, <code>GET /impair/10</code> retourne <code>[1, 3, 5, 7, 9]</code></li> </ul> </li> <li>Cr\u00e9er un endpoint <code>/consonnes/{word}</code> qui retourne la liste des consonnes d'un mot<ul> <li>Par exemple, <code>GET /consonnes/hello</code> retourne <code>[\"h\", \"l\", \"l\"]</code></li> </ul> </li> <li>Cr\u00e9er un endpoint <code>/longueur/{word}</code> qui retourne longueurs de la cha\u00eene de caract\u00e8res word<ul> <li>Par exemple, <code>GET /longueur/hello</code> retourne <code>5</code></li> </ul> </li> </ol>"},{"location":"asp-dot-net-exercices/#serie-2","title":"S\u00e9rie 2","text":"<ol> <li>Cr\u00e9er un endpoint <code>/palindrome/{word}</code> qui retourne <code>Est un palindrome</code> si <code>word</code> est un palindrome, sinon <code>N'est pas un palindrome</code><ul> <li>Par exemple, <code>GET /palindrome/toto</code> retourne <code>N'est pas un palindrome</code>, et <code>GET /palindrome/totot</code> retourne <code>Est un palindrome</code></li> </ul> </li> <li>Cr\u00e9er un endpoint <code>/schtroumpf/{nb1}/{nb2}</code> qui retourne le schtroumpf d'un tableau de <code>nb1</code> \u00e9l\u00e9ments al\u00e9atoires et d'un tableau de <code>nb2</code> \u00e9l\u00e9ments al\u00e9atoires. Les valeurs des deux tableaux sont comprises entre 1 et 12 <ul> <li>voir d\u00e9finition dans les exos C#</li> <li>Par exemple, <code>GET /schtroumpf/4/2</code> avec les tableaux al\u00e9atoire <code>[4, 8, 7, 12]</code> et <code>[3, 6]</code>, le r\u00e9sultat sera <code>279</code></li> </ul> </li> <li>Cr\u00e9er un endpoint <code>/notes</code> qui g\u00e9n\u00e8re 10 notes al\u00e9atoires et renvoie un json listant les notes, la moyenne et le nombre de notes sup\u00e9rieures \u00e0 la moyenne.<ul> <li>Exemple     <pre><code>{\n    \"notes\": [12, 15, 8, 10, 18, 14, 9, 11, 13, 16],\n    \"moyenne\": 12.6,\n    \"nbNotesSupMoyenne\": 5\n}\n</code></pre></li> </ul> </li> <li>Cr\u00e9er un endpoint <code>/notes/{nb}</code> qui g\u00e9n\u00e8re <code>nb</code> notes al\u00e9atoires et renvoie un json listant les notes, la moyenne et le nombre de notes sup\u00e9rieurs \u00e0 la moyenne.<ul> <li>Exemple: <code>/notes/10</code> <pre><code>{\n    \"notes\": [12, 15, 8, 10, 18, 14, 9, 11, 13, 16],\n    \"moyenne\": 12.6,\n    \"nbNotesSupMoyenne\": 5\n}\n</code></pre></li> </ul> </li> </ol> Solutions code<pre><code>using System.Reflection.Metadata.Ecma335;\n\nbool IsPalindromeAlgo(string input)\n{\n  for (int i = 0; i &lt; input.Length / 2; i++)\n  {\n    if (input[i] != input[input.Length - i - 1])\n    {\n      return false;\n    }\n  }\n  return true;\n}\n\nbool IsPalindromeEz(string input) =&gt; string.Join(\"\", input.Reverse()) == input;\n\nList&lt;int&gt; generateRandomIntList(int nb)\n{\n  List&lt;int&gt; items = [];\n  Random r = new();\n  for (int i = 0; i &lt; nb; i++)\n  {\n    items.Add(r.Next(1, 12));\n  }\n  return items;\n}\n\nint ComputeSchtroumpf(List&lt;int&gt; items1, List&lt;int&gt; items2)\n{\n  int result = 0;\n  foreach (var item1 in items1)\n  {\n    foreach (var item2 in items2)\n    {\n      result += item1 * item2;\n    }\n  }\n  return result;\n}\n\n\nint ComputeRandomSchtroumpf(int nb1, int nb2)\n{\n  Random r = new();\n  List&lt;int&gt; items1 = generateRandomIntList(nb1);\n  List&lt;int&gt; items2 = generateRandomIntList(nb2);\n  return ComputeSchtroumpf(items1, items2);\n}\n\nint ComputeExampleSchtroumpf()\n{\n  return ComputeSchtroumpf([4, 8, 7, 12], [3, 6]);\n}\n\nGradeResponse GenerateGradeResponse(int n = 10)\n{\n  var rng = new Random();\n  List&lt;int&gt; notes = Enumerable.Range(1, n).Select(_ =&gt; rng.Next(20)).ToList();\n  var avg = notes.Average();\n  int nbSup = notes.Where(note =&gt; note &gt; avg).Count();\n  return new GradeResponse(notes, avg, nbSup);\n}\n\nvar builder = WebApplication.CreateBuilder(args);\nvar app = builder.Build();\n\napp.MapGet(\"/pair\", () =&gt; Enumerable.Range(0, 11).Select(n =&gt; n * 2));\napp.MapGet(\"/pair/{nb}\", (int nb) =&gt; Enumerable.Range(0, nb + 1).Select(n =&gt; n % 2 == 0));\napp.MapGet(\"/impair/{nb}\", (int nb) =&gt; Enumerable.Range(0, nb + 1).Select(n =&gt; n % 2 != 0));\napp.MapGet(\"/consonnes/{mot}\", (string mot) =&gt; mot.ToLower().Where(c =&gt; !\"aiueoy\".Contains(c)));\napp.MapGet(\"/longueur/{word}\", (string word) =&gt; word.Length);\n\n\napp.MapGet(\"/palindrome/{word}\", (string word) =&gt; IsPalindromeAlgo(word) ? \"Est un palindrome\" : \"n'est pas un palindrome\");\napp.MapGet(\"/ez/palindrome/{word}\", (string word) =&gt; IsPalindromeEz(word) ? \"Est un palindrome\" : \"n'est pas un palindrome\");\napp.MapGet(\"/schtroumpf/{nb1}/{nb2}\", (int nb1, int nb2) =&gt; ComputeRandomSchtroumpf(nb1, nb2));\napp.MapGet(\"/example/schtroumpf/\", () =&gt; ComputeExampleSchtroumpf());\napp.MapGet(\"/notes\", GenerateGradeResponse);\napp.MapGet(\"/notes/{nb}\", (int nb) =&gt; GenerateGradeResponse(nb));\n\n\napp.Run();\n\n\nrecord GradeResponse(List&lt;int&gt; Notes, double Moyenne, int NbNotesSupMoyenne);\n</code></pre> appels de test<pre><code>@base_url=http://localhost:5286\n###\n{{base_url}}/pair\n###\n{{base_url}}/pair/5\n###\n{{base_url}}/consonnes/hello\n###\n{{base_url}}/consonnes/aaabb\n###\n{{base_url}}/palindrome/elle\n###\n{{base_url}}/palindrome/tintin\n###\n{{base_url}}/ez/palindrome/elle\n###\n{{base_url}}/ez/palindrome/tintin\n###\n{{base_url}}/example/schtroumpf/\n###\n{{base_url}}/schtroumpf/5/2\n###\n{{base_url}}/notes\n###\n{{base_url}}/notes/7\n</code></pre>"},{"location":"asp-dot-net/","title":"ASP .Net","text":""},{"location":"asp-dot-net/#prerequis","title":"Pr\u00e9requis","text":"<ul> <li>Faire confiance au certificat SSL local (pour le dev) <code>dotnet dev-certs https --trust</code></li> </ul>"},{"location":"asp-dot-net/#creation-dune-api-minimals-un-seul-fichier","title":"Cr\u00e9ation d'une API minimals (un seul fichier)","text":"<ul> <li>Cr\u00e9er un Projet d'API \"minimal API\" <code>dotnet new webapi -o HelloApi</code>. Ensuite, <code>cd HelloApi</code>.</li> <li>Les \u00e9l\u00e9ments suivants sont cr\u00e9\u00e9s (on peut voir avec un <code>ls</code>):<ul> <li>Program.cs: point d'entr\u00e9e de l'application qui d\u00e9finit d\u00e9j\u00e0 un API Rest et un endoint get.</li> <li>api01.csproj: fichier de configuration du projet.</li> <li>api01.http: fichier de test de l'API avec l'extension VSCode Rest Client.</li> <li>Properties, appsettings.Development.json et appsettings.json: permettent de configurer l'application et le serveur</li> </ul> </li> <li>Lancer le serveur <code>dotnet run</code>, ou en mode hot reload <code>dotnet watch run</code></li> <li>Tester l'API avec un client REST (comme Rest Client de VSCode)</li> </ul> calls.http<pre><code>@base_url = http://localhost:5122\n\nGET {{base_url}}/weatherforecast/\nAccept: application/json\n</code></pre>"},{"location":"asp-dot-net/#autre-exemple","title":"Autre exemple","text":"calls.http<pre><code>var builder = WebApplication.CreateBuilder(args);\nvar app = builder.Build();\n\nList&lt;Hero&gt; heroes = [\n  new() { Id = 1, Name = \"garan\", Role = Role.Fighter },\n  new() { Id = 2, Name = \"saraka\", Role = Role.Spport },\n];\n\napp.MapGet(\"/heroes\", () =&gt; heroes);\n// Path parameter\napp.MapGet(\"/heroes/{id}\", (int id) =&gt; heroes[id]);\napp.MapGet(\"/\", () =&gt; \"Hello World!\");\n\napp.Run();\n\npublic enum Role\n{\n  Fighter, Mage, Spport, Shooter\n}\npublic class Hero\n{\n  public int Id { get; set; }\n  public required string Name { get; set; }\n  public required Role Role { get; set; }\n}\n</code></pre>"},{"location":"asp-dot-net/#ressources","title":"Ressources","text":"<ul> <li>Tutoriel officiel</li> </ul>"},{"location":"csharp-exercices/","title":"Exercices","text":"<p>Consignes</p> <ul> <li>Activer la null safety</li> <li>Ne pas utiliser les fonctions de tri de .Net</li> </ul>"},{"location":"csharp-exercices/#serie-1","title":"S\u00e9rie 1","text":"<ol> <li>Ecrire un programme qui affiche un nombre al\u00e9atoire en utilisant la classe <code>Random</code>. Voir un exemple ici</li> <li>Ecrire une fonction qui g\u00e9n\u00e8re 2 entiers pseudo-al\u00e9atoires entre 0 et 50 et les affiche dans l'ordre croissant</li> <li>Ecrire une fonction qui g\u00e9n\u00e8re 3 entiers pseudo-al\u00e9atoires entre 0 et 50 et les affiche dans l'ordre croissant</li> <li>Ecrire une fonction qui g\u00e9n\u00e8re des entiers pseudo-al\u00e9atoires entre 10 et 20 et s'arr\u00eate lorsque le premier nombre g\u00e9n\u00e9r\u00e9 appara\u00eet une seconde fois</li> <li>Ecrire un programme qui g\u00e9n\u00e8re un nombre de d\u00e9part entre 0 et 9, et qui ensuite \u00e9crit la table de multiplication de ce nombre, pr\u00e9sent\u00e9e comme suit (cas du nombre 5).<ul> <li></li> </ul> </li> <li>Ecrire un programme qui g\u00e9n\u00e8re un tableau 2D \u00e9pars de 4 lignes. Pour chaque ligne, le nombre de colonnes est un nombre pseudo-al\u00e9atoire. Remplir cette matrice par des nombres pseudo-al\u00e9atoires de valeur max 999<ul> <li>Afficher cette matrice comme sur Excel. Conseil: utiliser la m\u00e9thode <code>PadRight</code></li> </ul> </li> <li>Ecrire un programme qui g\u00e9n\u00e8re deux tableaux de tailles pseudo-al\u00e9atoires et de contenus pseudo-al\u00e9atoires. Calculer le schtroumpf des deux tableaux et afficher le d\u00e9tail. Les nombres al\u00e9atoires sont compris entre 0 et 10.<ul> <li>Pour calculer le schtroumpf, il faut multiplier chaque \u00e9l\u00e9ment du tableau 1 par chaque \u00e9l\u00e9ment du tableau 2, et additionner le tout.</li> <li>Par exemple si l'on a : [4, 8, 7, 12] et [3, 6], le programme va afficher: <code>Le Schtroumpf sera : 3 x 4 + 3 x 8 + 3 x 7 + 3 x 12 + 6 x 4 + 6 x 8 + 6 x 7 + 6 x 12 = 279</code></li> </ul> </li> <li>Ecrivez un programme permettant de g\u00e9n\u00e9rer al\u00e9atoirement 10 notes comprises entre 0 et 20. Le programme, renvoie la liste et le nombre de notes sup\u00e9rieures \u00e0 la moyenne de la classe.</li> <li>Ecrire une fonction IsPalindrome(string) qui permet de dire si une cha\u00eene de caract\u00e8res est un palindrome, et ce Sans utiliser de fonction reverse,<ul> <li><code>IsPalindrome(\"toto\")</code> -&gt; false (car toto != otot)</li> <li><code>IsPalindrome(\"totot\")</code> -&gt; true</li> </ul> </li> <li>Ecrire une fonction IsPalindrome(int) qui permet de dire si un entier est un palindrome, et ce, sans transformer l'entier en String<ul> <li><code>IsPalindrome(1234)</code> -&gt; false</li> <li><code>IsPalindrome(12321)</code> -&gt; true</li> <li><code>IsPalindrome(1221)</code> -&gt; true</li> <li><code>IsPalindrome(1)</code> -&gt; true</li> </ul> </li> <li>Mod\u00e9lisation des pi\u00e8ce d'un ordinateur avec les classes.<ul> <li>Chaque pi\u00e8ce \u00e9lectronique d'un ordinateur est de type <code>ComputerPiece</code> et est d\u00e9finie par un prix et une consommation en watts.</li> <li>D\u00e9finir la classe <code>ComputerPiece</code> de telle fa\u00e7on \u00e0 ce que l'on ne peut pas l'instancier.</li> <li>Nous souhaitons mod\u00e9liser une classe <code>CPU</code> qui est une sorte de <code>ComputerPiece</code> avec une vitesse d'horloge et un nombre de coeurs.</li> <li>Mod\u00e9liser les classes <code>MotherBoard</code>, <code>RAM</code>, <code>GPU</code>, <code>SoundCard</code>, <code>BluetoothCard</code> en leur attribuant des propri\u00e9t\u00e9s sp\u00e9cifiques.</li> <li>La classe <code>Computer</code> contient des pi\u00e8ces requises (non nulles): 1 <code>MotherBoard</code>, 1 <code>CPU</code> et 1 <code>GPU</code>. Elle contient aussi des pi\u00e8ces optionnelles (qui peuvent \u00eatre nulles): 1 <code>SoundCard</code> et 1 <code>BluetoothCard</code>.</li> <li>Instancier un ordinateur qui n'a que les pi\u00e8ces requises</li> <li>Instancier un ordinateur qui a les pi\u00e8ces optionnelles</li> <li>Afficher les informations de chaque ordinateur en suivant ce mod\u00e8le<ul> <li>\"Ordinateur: CPU (ClockSpeed: 100, ...), GPU(ClockSpeed: 20, ...)\"</li> </ul> </li> <li>La classe <code>SliComputer</code> est un <code>Computer</code> qui contient un tableau qui peut contenir jusqu'\u00e0 9 GPU suppl\u00e9mentaires qui doivent \u00eatre du m\u00eame type que le GPU principal. Elle d\u00e9finit aussi une m\u00e9thode <code>bool IsSliCompliant()</code> qui retourne true unqiement si tout les GPU sont exactement les m\u00eames.</li> <li>Instancier un <code>SliComputer</code> avec 2 GPU suppl\u00e9mentaires identiques au GPU principal.</li> <li>Instancier un <code>SliComputer</code> avec 3 GPU suppl\u00e9mentaires diff\u00e9rents du GPU principal.</li> <li>Afficher le r\u00e9sultat de <code>IsSliCompliant()</code> \u00e0 chaque fois.</li> </ul> </li> </ol>"},{"location":"csharp-exercices/#corrections-serie-1","title":"Corrections s\u00e9rie 1","text":"<ul> <li>Les corrections sont disponibles ci-dessous ainsi qu'en suivant ce lien</li> </ul> Exos de 1 \u00e0 5 exos de 1 \u00e0 5<pre><code>void RunExercice1()\n{\n  Console.WriteLine(\"Exercise 1\");\n  var r = new Random();\n  Console.WriteLine(r.Next());\n}\n\nvoid RunExercice2()\n{\n  Console.WriteLine(\"Exercise 2\");\n  var r = new Random(50);\n  int x = r.Next();\n  int y = r.Next();\n  if (x &lt; y)\n  {\n    Console.WriteLine($\"{x}, {y}\");\n  }\n  else\n  {\n    Console.WriteLine($\"{y}, {x}\");\n  }\n}\n\nvoid RunExercice3()\n{\n  var r = new Random();\n  int x = r.Next(50);\n  int y = r.Next(50);\n  int z = r.Next(50);\n  Console.WriteLine($\"Exercise 3: tri de {x}, {y} et {z}\");\n  if (x &lt; y)\n  {\n    if (z &lt; x)\n    {\n      Console.WriteLine($\"{z}, {x}, {y}\");\n    }\n    else if (z &lt; y)\n    {\n      Console.WriteLine($\"{x}, {z}, {y}\");\n    }\n    else\n    {\n      Console.WriteLine($\"{x}, {y}, {z}\");\n    }\n  }\n  else // y &lt;= x\n  {\n    if (z &lt; y)\n    {\n      Console.WriteLine($\"{z}, {y}, {x}\");\n    }\n    else if (z &lt; x)\n    {\n      Console.WriteLine($\"{y}, {z}, {x}\");\n    }\n    else\n    {\n      Console.WriteLine($\"{y}, {x}, {z}\");\n    }\n  }\n}\n\nvoid RunExercice4()\n{\n  var r = new Random();\n  int x = r.Next(50);\n  Console.WriteLine($\"Exercise 4: le premier nombre g\u00e9n\u00e9r\u00e9 est {x}\");\n  int nbIter = 1;\n  for (; x != r.Next(50); nbIter++)\n  { }\n  Console.WriteLine($\"Exercise 4: Nb it\u00e9ration avant de trouver {x} est de {nbIter}\");\n}\n\nvoid RunExercice5()\n{\n  var r3 = new Random();\n  var nb = r3.Next(10);\n  Console.WriteLine($\"Exercise 5: table de multiplication de {nb}:\");\n  for (int i = 0; i &lt;= 10; i++)\n  {\n    Console.WriteLine($\"{nb} x {i} = {nb * i}\");\n  }\n}\n\n\nvoid RunExercices()\n{\n  RunExercice1();\n  RunExercice2();\n  for (int i = 0; i &lt; 20; i++)\n  {\n    RunExercice3();\n  }\n\n  RunExercice4();\n  RunExercice5();\n\n}\n</code></pre> Exercice 11 Exercice 11<pre><code>class ComputerPiece\n{\n  // prorpi\u00e9t\u00e9 en lecture et \u00e9criture\n  public int WattUsage { get; set; }\n  // prorpi\u00e9t\u00e9 en lecture seule\n  public int Price { get; }\n\n  public ComputerPiece(int price)\n  {\n    Console.WriteLine(\"ComputerPiece constructor\");\n    this.Price = price;\n  }\n}\n\nclass PowerGenerator : ComputerPiece\n{\n  public PowerGenerator(int price) : base(price)\n  {\n  }\n}\n\nclass UsbPort : ComputerPiece\n{\n  public UsbPort(int price) : base(price)\n  {\n  }\n}\n\nclass CPU : ComputerPiece\n{\n  public CPU(int price) : base(price)\n  {\n  }\n  public int ClockSpeed { get; set; }\n  public int CoreCount { get; set; }\n}\n\nclass RAM : ComputerPiece\n{\n  public RAM(int price) : base(price)\n  {\n  }\n  public int Capacity { get; set; }\n}\n\nCPU cpu1 = new CPU(200);\ncpu1.WattUsage = 100;\nConsole.WriteLine(cpu1.WattUsage);\n\nCPU cpu2 = new(500);\ncpu2.WattUsage = 100;\nConsole.WriteLine(cpu2.WattUsage);\n\nCPU cpu3 = new(200)\n{\n  ClockSpeed = 100,\n  CoreCount = 8,\n  WattUsage = 10\n};\nConsole.WriteLine(cpu3);\n\n\nRAM ram1 = new(200)\n{\n  Capacity = 8000,\n  WattUsage = 10\n};\nConsole.WriteLine(ram1);\n\nComputerBox computerBox = new(10, 10, 5);\nConsole.WriteLine(computerBox);\n</code></pre>"},{"location":"csharp-exercices/#serie-2","title":"S\u00e9rie 2","text":"<ol> <li>Mod\u00e9lisation des formes g\u00e9om\u00e9triques avec les <code>Record</code><ol> <li>Cr\u00e9er un record <code>Circle</code> qui prend en param\u00e8tre du constructeur un <code>Radius</code><ul> <li>Ajouter les propri\u00e9t\u00e9s calcul\u00e9es publiques (en lecture seule): Area, <code>Circumference</code> et <code>Diameter</code></li> <li>Cr\u00e9er deux instances ayant le m\u00eame rayon et affichez les dans la console, en utilisant le ToString() propos\u00e9 par les record</li> <li>Comparer les deux cercles avec l\u2019op\u00e9rateur \u2018==\u2019. Ensuite, comparez en enlevant la nature record de Cercle. Que remarquez-vous ?</li> </ul> </li> <li>Cr\u00e9er un record abstract \u201cShape\u201d avec un constructeur vide et les propri\u00e9t\u00e9 en lecture seule abstraites: <code>Area</code> et <code>Circumference</code></li> <li>Faire en sorte que <code>Circle</code> h\u00e9rite de <code>Shape</code></li> <li>Cr\u00e9er un record \u201cRectangle\u201d qui h\u00e9rite de <code>Shape</code> et prend en param\u00e8tre du constructeur (<code>Width</code> et <code>Height</code>)<ul> <li>Impl\u00e9menter les propri\u00e9t\u00e9s calcul\u00e9es (en lecture seule): Area, <code>Circumference</code> (m\u00eame si techniquement, \u00e7a devrait s\u2019appeler <code>Perimeter</code>)</li> </ul> </li> <li>Cr\u00e9er une fonction <code>PrintShapeInfo</code> qui prend un <code>Shape</code> en param\u00e8tre et qui utilise le pattern matching pour afficher des infos diff\u00e9rentes selon le type du <code>Shape</code></li> <li>Cr\u00e9er une fonction qui g\u00e9n\u00e8re al\u00e9atoirement une liste de <code>Shape</code> de type Circle ou Rectangle avec des valeurs initiales al\u00e9atoires. Le nombre d\u2019\u00e9l\u00e9ments \u00e0 g\u00e9n\u00e9rer est pass\u00e9 en param\u00e8tre. Utiliser cette m\u00e9thode pour g\u00e9n\u00e9rer une liste de 10 <code>Shape</code></li> <li>Utiliser LINQ (<code>Select</code>, <code>Where</code>, <code>Aggregate</code>, etc.) pour g\u00e9n\u00e9rer un objet qui a deux champs: <code>SumCircleArea</code> et <code>MaxRectangleWidth</code>:<ul> <li><code>SumCircleArea</code> : la somme des surfaces de tous les cercles. <code>MaxRectangleWidth</code> : la largeur maximale des rectangles</li> <li>Faire en sorte que l\u2019objet g\u00e9n\u00e9r\u00e9 soit anonyme</li> </ul> </li> <li>Utiliser LINQ pour calculer le nombre de cercles dans la liste</li> <li>Utiliser LINQ pour calculer le nombre de rectangles dont la superficie est &gt; 10</li> <li>Utiliser LINQ pour calculer la circonf\u00e9rence moyenne des cercles (astuce: m\u00e9thode average)</li> </ol> </li> </ol>"},{"location":"csharp-tour/","title":"Tour du langage C","text":"<p>Nous allons faire un tour du langage C# sans forc\u00e9ment tout couvrir car le langage est tr\u00e8s riche.</p> <p>Warning</p> <p>Comme le langage C# \u00e9volue chaque ann\u00e9e et apporte des am\u00e9lioration et simplifications r\u00e9guli\u00e8rement, il se peut que les exemples de code vues ici soient diff\u00e9rents de ce que vous trouvez dans la litt\u00e9rature.</p>"},{"location":"csharp-tour/#premiers-concepts","title":"Premiers concepts","text":"<ul> <li>Cr\u00e9ation d'un projet appel\u00e9 hello-cs avec le CLI: <code>dotnet new console -n \"hello_cs\"</code></li> <li>Configuration du projet avec le fichier csproj</li> <li>D\u00e9veloppement: Lancement de l'application avec <code>dotnet run</code> ou depuis VSCode avec F5 ou Ctrl + F5</li> <li>Concepts \u00e0 couvrir: Types de base, fonctions, conditions, boucles, tableaux, etc.</li> </ul>"},{"location":"csharp-tour/#quelques-caracteristiques","title":"Quelques caract\u00e9ristiques","text":"<ul> <li>C# est statiquement typ\u00e9: une variable ne peut pas changer de type (contraire de dynamiquement typ\u00e9)</li> <li>C# supporte la programmation orient\u00e9 objet et fonctionnelle</li> <li>Diff\u00e9rences avec les conventions de codage java:<ul> <li>Les noms des m\u00e9thodes, propri\u00e9t\u00e9s publiques et constantes publiques commencent avec une majuscule: <code>Console.WriteLine(\"Hello World!\");</code></li> <li>Un attribut priv\u00e9 est pr\u00e9fix\u00e9 avec un <code>_</code></li> <li>Les m\u00e9thodes asynchrones sont suffix\u00e9es avec le terme <code>async</code></li> <li>Les interfaces commencent avec la lettre I (<code>IEnumerable</code>)</li> </ul> </li> <li>Autres conventions communes:<ul> <li>Une m\u00e9thode ou fonction commence par un verbe \u201cWriteLine\u201d et non \u201cLineWrite\u201d</li> <li>Le nom d\u2019une classe commence par une majuscule</li> </ul> </li> <li>C# supporte la null safety: permet d'avertir ou d'interdire la manipulation de valeurs nulles sans pr\u00e9caution pr\u00e9alable de la part du codeur.</li> </ul> <pre><code>void RunTour(){\n\n}\n// Premier tour du langage\nConsole.WriteLine(\"Hello, World!\");\n\nint intValue = 10;\nbool b = false;\nstring s = \"hello\";\n\nConsole.WriteLine(intValue);\nConsole.WriteLine(s);\n\n// Ne pas utliser la concat\u00e9nation\nConsole.WriteLine(\"La valeur de s est : \" + s + \" et la valeur de est \" + intValue);\n// Car il y a mieux \u00e0 la place avec $\"\" -&gt; interpolation de string\nConsole.WriteLine($\"La valeur de s est : {s} et la valeur de l'entier est {intValue}\");\n\n// intValue = \"Hello\"; // erreur car statiquement typ\u00e9 et intValue est un int\n\n// typage implicite: message sera de type string\nvar message = $\"La valeur de s est : {s} et la valeur de l'entier est {intValue}\";\nConsole.WriteLine(message);\n\nRandom r = new Random();\nint randomVal = r.Next(10, 20);\n\nif (randomVal &gt; 15)\n{\n  Console.WriteLine(\"gagn\u00e9\");\n}\nelse\n{\n  Console.WriteLine(\"perdu\");\n}\n\nfor (int i = 3; i &lt; 8; i++)\n{\n  Console.WriteLine($\"La valeur de i est : {i}\");\n}\n\n// Mettre un identifiant au pluriel pour les tableaux\nint[] items = { 1, 2, 4 };\n\nfor (int i = 0; i &lt; items.Length; i++)\n{\n  Console.WriteLine($\"La valeur de l'\u00e9lement d'indice {i} du tableau est : {items[i]}\");\n}\n\nforeach (var item in items)\n{\n  Console.WriteLine($\"La valeur de l'\u00e9lement courant est : {item}\");\n}\n</code></pre>"},{"location":"csharp-tour/#programmation-oriente-objet","title":"Programmation orient\u00e9 objet","text":"<ul> <li>Le programme est vu comme un ensemble d'objets qui interagissent entre eux.</li> <li>Chaque object est d\u00e9fini par une classe qui elle m\u00eame h\u00e9riter d'autres classes ou interfaces.</li> <li>Une classes peut d\u00e9finir des propri\u00e9t\u00e9s et des m\u00e9thodes, qu'on appelle des membres.<ul> <li>Propri\u00e9t\u00e9 : une vue sur une donn\u00e9e via ses accesseurs en lecture et / ou \u00e9criture (qu'on appelle getters et setter respectivement).</li> <li>M\u00e9thode : fonction qui est d\u00e9finie au sein de la classe</li> </ul> </li> <li>Une classe enfant peut h\u00e9riter d'une seule classe parente en C#:<ul> <li>Dans ce cas, la classe enfant contiendra implicitement tous les membres de la classe m\u00e8re</li> <li>La classe enfant peut d\u00e9finir des membres suppl\u00e9mentaires qui lui seront propres</li> <li>La classe enfant peut red\u00e9finir des membres de classe parent. On appelle cela une surcharge ou override en Anglais.</li> </ul> </li> <li>Notion de Propri\u00e9t\u00e9, m\u00e9thode ou classe statique:<ul> <li>Propri\u00e9t\u00e9 d'instance : chaque instance a ses propres prori\u00e9t\u00e9s d'instances</li> <li>Propri\u00e9t\u00e9 statique : elle sera partag\u00e9e entre toutes les instances (comme une variable globale pour la classe)</li> <li>M\u00e9thode d'instance : sera ex\u00e9cut\u00e9e dans le contexte de l'instance qui l'a appel\u00e9e (accessible via <code>this</code>)</li> <li>M\u00e9thode statique : m\u00e9thode qui a comme contexte que les propri\u00e9t\u00e9 et m\u00e9thodes statiques de sa classe</li> <li>Classe statique : une classe qui ne peut pas \u00eatre instanci\u00e9e et ne contiendra donc que des propri\u00e9t\u00e9 et m\u00e9thodes statiques</li> </ul> </li> <li>M\u00e9thode, propri\u00e9t\u00e9 et classe abstraite:<ul> <li>M\u00e9thode abstraite: m\u00e9thode qui n'a pas d'impl\u00e9mentation</li> <li>Propri\u00e9t\u00e9 abstraite: propri\u00e9t\u00e9 dont les accesseurs ne sont pas d\u00e9finis</li> <li>Classe abstraite: une classe qui a au moins une propri\u00e9t\u00e9 ou m\u00e9thode abstraite</li> <li>Les membres abstraits sont destin\u00e9s \u00e0 \u00eatre d\u00e9finis par une sous classe non abstraite.</li> </ul> </li> </ul> <pre><code>// ComputerPiece.cs\nnamespace DemoOpp\n{\n    class ComputerPiece\n    {\n        // prorpi\u00e9t\u00e9 en lecture et \u00e9criture\n        public int WattUsage { get; set; }\n        // prorpi\u00e9t\u00e9 en lecture seule\n        public int Price { get; }\n\n        public ComputerPiece(int price)\n        {\n            Console.WriteLine(\"ComputerPiece constructor\");\n            this.Price = price;\n        }\n    }\n\n    class PowerGenerator : ComputerPiece, ILightable\n    {\n        public PowerGenerator(int price) : base(price)\n        {\n        }\n\n        public void TurnLightsOff()\n        {\n            throw new NotImplementedException();\n        }\n\n        public void TurnLightsOn()\n        {\n            throw new NotImplementedException();\n        }\n    }\n\n    class UsbPort : ComputerPiece, ILightable\n    {\n        public UsbPort(int price) : base(price)\n        {\n        }\n\n        public void TurnLightsOff()\n        {\n            throw new NotImplementedException();\n        }\n\n        public void TurnLightsOn()\n        {\n            throw new NotImplementedException();\n        }\n    }\n\n    class CPU : ComputerPiece\n    {\n        public CPU(int price) : base(price)\n        {\n        }\n        public int ClockSpeed { get; set; }\n        public int CoreCount { get; set; }\n    }\n\n    class RAM : ComputerPiece\n    {\n        public RAM(int price) : base(price)\n        {\n        }\n        public int Capacity { get; set; }\n    }\n}\n// ILightable.cs\nnamespace DemoOpp\n{\n    public interface ILightable\n    {\n        public void TurnLightsOn();\n        public void TurnLightsOff();\n    }\n}\n\n// IOverclockable.cs\nnamespace DemoOpp\n{\n    public interface IOverclockable\n    {\n        public int MaxPossibleClockSpeed { get; }\n        public void OverClock(int frequency);\n    }\n}\n\n// OopProgram.cs\n\ufeffusing DemoOpp;\n\nCPU cpu1 = new CPU(200);\ncpu1.WattUsage = 100;\nConsole.WriteLine(cpu1.WattUsage);\n\nCPU cpu2 = new(500);\ncpu2.WattUsage = 100;\nConsole.WriteLine(cpu2.WattUsage);\n\nCPU cpu3 = new(200)\n{\n    ClockSpeed = 100,\n    CoreCount = 8,\n    WattUsage = 10\n};\nConsole.WriteLine(cpu3);\n\n\nRAM ram1 = new(200)\n{\n    Capacity = 8000,\n    WattUsage = 10\n};\nConsole.WriteLine(ram1);\n\nComputerBox computerBox = new(10, 10, 5);\nConsole.WriteLine(computerBox);\n</code></pre>"},{"location":"csharp-tour/#constructeur-vs-bloc-dinitialisation","title":"Constructeur vs bloc d'initialisation","text":"<ul> <li>Le constructeur est une m\u00e9thode sp\u00e9ciale qui est appel\u00e9e lors de l'instanciation d'une classe</li> <li>Le bloc d'initialisation est un bloc de code qui est ex\u00e9cut\u00e9 avant le constructeur</li> <li>Il y a deux styles d'initialisation des propri\u00e9t\u00e9s d'une classe: l'initialisation via le constructeur et l'initialisation via le bloc d'initialisation</li> <li>Chaque style a des avantages et inconv\u00e9nients en terme de lisibilit\u00e9 et verbosit\u00e9</li> <li>M\u00eame si on peut mixer les deux styles d'initialisation, il est recommand\u00e9 de choisir un style et de s'y tenir pour la coh\u00e9rence du code</li> </ul> Deux styles d'initialisation<pre><code>HeroWithConstructor heroWithConstructor = new(1, \"garan\", Role.Fighter);\nHeroWithoutConstructor heroWithoutConstructor = new() { Id = 2, Name = \"saraka\", Role = Role.Spport };\n\npublic enum Role\n{\n  Fighter, Mage, Spport, Shooter\n}\n\npublic class HeroWithConstructor\n{\n  public int Id { get; set; }\n  public string Name { get; set; }\n  public Role Role { get; set; }\n\n  public HeroWithConstructor(int id, string name, Role role)\n  {\n    this.Id = id;\n    this.Name = name;\n    this.Role = role;\n  }\n}\n\npublic class HeroWithoutConstructor\n{\n  public required int Id { get; set; }\n  public required string Name { get; set; }\n  public required Role Role { get; set; }\n}\n</code></pre>"},{"location":"csharp-tour/#record","title":"record","text":"<p>Les record sont des classes avec des fonctionnalit\u00e9s suppl\u00e9mentaires qui permettent de simplifier la cr\u00e9ation de classes simples.</p> <ul> <li>Les records sont des classes immuables</li> <li>Les records sont des classes finales (non h\u00e9ritables)</li> <li>Les records ont des propri\u00e9t\u00e9s en lecture seule</li> <li>Les records ont des m\u00e9thodes <code>Equals</code>, <code>GetHashCode</code>, <code>ToString</code> et <code>With</code> g\u00e9n\u00e9r\u00e9es automatiquement</li> </ul> <pre><code>Person p1 = new(\"John\", \"Doe\");\nPerson p2 = new(\"John\", \"Doe\");\nConsole.WriteLine(p1.LastName);\n// p1.LastName = \"Hello\"; -&gt; erreur\nConsole.WriteLine(p1 == p2); // true\nConsole.WriteLine(p1); // Person { FirstName = John, LastName = Doe }\n\npublic record Person(string FirstName, string LastName);\n</code></pre>"},{"location":"csharp-tour/#programmation-fonctionnelle","title":"Programmation fonctionnelle","text":"<ul> <li>Les fonctions sont des \u00e9l\u00e9ments de premi\u00e8re classe : Les fonctions sont comme des variables</li> <li>Utilisation intensive de fonctions pures: fonction sans effet de bord, toujours le m\u00eame r\u00e9sultat pour les m\u00eames entr\u00e9es<ul> <li>exemples de fonctions par pure: <code>WriteLine</code> (car elle change la console)</li> </ul> </li> <li>Immutabilit\u00e9<ul> <li>On ne peut pas changer la valeur d'une variable une fois initialis\u00e9e</li> <li>On ne peut pas changer les propri\u00e9t\u00e9s d'un objet une fois instanci\u00e9</li> <li>On ne peut pas ajouter ou supprimer des \u00e9l\u00e9ments d'une collection</li> </ul> </li> <li>On le code est d\u00e9velopp\u00e9 sous forme d'une cha\u00eene de traitements (comme dans une usine)</li> </ul>"},{"location":"csharp-tour/#relation-entre-la-poo-et-la-programmation-fonctionnelle","title":"Relation entre la POO et la programmation fonctionnelle","text":"<ul> <li>La POO est la prog. fonctionnelle ne sont pas mutuellement exclusifs</li> <li>On peut d\u00e9velopper en POO avec un style fonctionnelle:<ul> <li>Les m\u00e9thodes ne font pas de mutation de chmaps de l'objet</li> <li>Les propri\u00e9t\u00e9s sont uniquement en read-only</li> <li>Les <code>records</code> simplifient la cr\u00e9ation de ce genre de classes</li> </ul> </li> </ul>"},{"location":"csharp-tour/#autres-fonctionnalites-pratiques","title":"Autres fonctionnalit\u00e9s pratiques","text":"<ul> <li>M\u00e9thodes d'extension: permettent de rajouter une m\u00e9thode \u00e0 une classe sans passer par l'h\u00e9ritage</li> <li>Null-safety<ul> <li>Cette options est activ\u00e9e avec la propri\u00e9t\u00e9 <code>&lt;Nullable&gt;enable&lt;/Nnullable&gt;</code> au niveau du projet.</li> <li>Pour signaler des erreurs au lieu d'avertissements, utiliser la propri\u00e9t\u00e9 <code>&lt;WarningsAsErrors&gt;Nullable&lt;/WarningsAsErrors&gt;</code> au niveau du projet.</li> </ul> </li> </ul>"},{"location":"csharp-tour/#debug-vs-release","title":"Debug vs release","text":"<ul> <li>Mode debug =&gt; \u00e0 utiliser pour le dev via <code>dotnet run</code><ul> <li>On peut d\u00e9bugger (point d'arr\u00eat, inspecter des variables et la stack frame ou stack trace)</li> <li>Programme plus lourd en espace et Moins rapide</li> <li><code>dotnet run</code> permet de g\u00e9n\u00e9rer et binaire debug et de l\u2019ex\u00e9cuter juste apr\u00e8s</li> </ul> </li> <li>Mode release: =&gt; \u00e0 utiliser pour la mise en prod<ul> <li>On peut pas d\u00e9bugger</li> <li>Programme moins spatieux et plus rapide</li> <li><code>dotnet publish -c Release \u2026</code></li> </ul> </li> </ul>"},{"location":"csharp-tour/#mise-en-production-dun-projet-c","title":"Mise en production d'un projet <code>C#</code>","text":"<ul> <li>Pour g\u00e9n\u00e9rer le binaire selon l\u2019OS: <code>dotnet publish -c Release -r &lt;RID&gt; --self-contained (false ou true)</code><ul> <li><code>-c Release</code>: optimiser et ne pas inclure les infos de d\u00e9bogage</li> <li><code>-r &lt;RID&gt;</code>: rid est \u00e0 remplacer par l\u2019id du syst\u00e8me cible. Exemples: <code>win-x64</code>, <code>linux-x64</code>, <code>osx-x64</code>, etc.</li> <li><code>--self-contained</code>: permet d\u2019embarquer ou non le runtime dotnet dans le livrable. Pour une livraison autonome pr\u00e9f\u00e9rer le <code>--self-contained</code> \u00e0 <code>true</code> au lieu de <code>false</code></li> </ul> </li> <li>Votre livrable se trouvera dans le dossier: <code>bin\\Release\\netx.x\\&lt;rid&gt;\\publish</code></li> <li>Tous les fichiers sont \u00e0 installer dans les postes client \u00e0 part le fichier <code>...deps.json</code> et le fichier <code>... .pdb</code></li> <li>Ensuite, il faudra soit fournir les binaires dans une archive, soit fournir un installeur</li> <li>Visual Studio permet de g\u00e9n\u00e9rer des installeurs plus facilement</li> </ul>"},{"location":"dotnet-exercices/","title":"Exercices","text":"<p>Consignes</p> <ul> <li>Activer la null safety</li> <li>Ne pas utiliser les fonctions de tri de .Net</li> </ul>"},{"location":"dotnet-exercices/#collections","title":"Collections","text":""},{"location":"dotnet-exercices/#partie-1","title":"Partie 1","text":"<p>Utiliser <code>foreach</code> si besoin (et ne pas utiliser LINQ: Select, etc.):</p> <ol> <li>Cr\u00e9er une fonction qui prend une liste d'entiers en argument et affiche uniquement les entiers pairs.</li> <li>Cr\u00e9er une fonction qui prend une liste d'entiers en argument et retourne la liste des entiers pairs.</li> <li>Cr\u00e9er une fonction qui prend une cha\u00eene de caract\u00e8res en argument (string) et retourne la liste de ses consonnes (pour rappel, les voyelles sont a, i, u, e, o et y).</li> <li>Cr\u00e9er une fonction qui prend une liste de cha\u00eenes de caract\u00e8res et retourne la liste des longueurs de chaque cha\u00eene.<ul> <li>Par exemple: <code>[\"hello\", \"C#\"]</code> retourne <code>[5, 2]</code></li> </ul> </li> <li>D\u00e9finir un <code>record</code> <code>Person</code> avec les propri\u00e9t\u00e9s <code>Name</code> et <code>Age</code>. Cr\u00e9er une liste de personnes et:<ol> <li>afficher les personnes dont l'\u00e2ge est sup\u00e9rieur \u00e0 18 ans.</li> <li>afficher les personnes dont le nom commence par la lettre 'A'.</li> <li>Cr\u00e9er une fonction qui change le nom en Camel case de chaque personne.<ul> <li>Par exemple: <code>Person(\"john doe\", 20)</code> devient <code>Person(\"John Doe\", 20)</code></li> </ul> </li> <li>Cr\u00e9er un fonction qui donne l'\u00e2ge moyen des personnes.</li> </ol> </li> </ol> Corrections 1<pre><code>\n</code></pre> 2<pre><code>\n</code></pre> 3<pre><code>\n</code></pre>"},{"location":"dotnet-exercices/#partie-2","title":"Partie 2","text":"<p>Utiliser LINQ pour la partie algorithmie. Utiliser <code>foreach</code> uniquement pour l'affichage.</p> <ol> <li>Refaire les exos de la partie 1 avec LINQ.</li> <li>Cr\u00e9er une fonction qui prend un entier n. La fonction g\u00e9n\u00e8re une liste de n entiers al\u00e9atoires entre 0 et 100 et affiche le min, le max, la somme et la moyenne.<ul> <li>Par exemple: si <code>n = 5</code> g\u00e9n\u00e8re le tableau <code>[10, 20, 30, 40, 50]</code>, afficher <code>min: 10, max: 50, sum: 150, avg: 30</code></li> </ul> </li> <li>Cr\u00e9er une fonction qui prend une liste de cha\u00eenes de caract\u00e8res et retourne la liste des cha\u00eenes de caract\u00e8res tri\u00e9es par ordre croissant de longueur. (\ud83d\udca1 utiliser <code>OrderBy((s) =&gt; s.Length)</code>).<ul> <li>Par exemple: <code>[\"hello\", \"C#\", \"world\"]</code> retourne <code>[\"C#\", \"hello\", \"world\"]</code></li> </ul> </li> <li>Cr\u00e9er une fonction qui prend une liste de cha\u00eenes de caract\u00e8res et retourne le nombre de caract\u00e8res total de toutes les cha\u00eenes.<ul> <li>Par exemple: <code>[\"hello\", \"C#\", \"world\"]</code> retourne <code>12</code></li> </ul> </li> <li>Cr\u00e9er une fonction qui prend une liste de cha\u00eenes de caract\u00e8res et retourne le nombre de mots qui ont une longueur sup\u00e9rieure \u00e0 3.<ul> <li>Par exemple: <code>[\"hello\", \"C#\", \"world\"]</code> retourne <code>2</code></li> </ul> </li> <li>D\u00e9finir un <code>record</code> <code>Ninja</code> avec les propri\u00e9t\u00e9s <code>Name</code>, <code>Hp</code> et <code>IsHokage</code>. Cr\u00e9er une liste de ninjas et:<ul> <li>Afficher les noms des Hokage.<ul> <li>Par exemple: <code>Ninja(\"Naruto\", 150, true)</code> et <code>Ninja(\"Sasuke\", 120, false)</code> retourne <code>Naruto</code></li> </ul> </li> <li>Afficher le nombre de ninjas qui ont plus de 100 points de vie.<ul> <li>Par exemple: <code>Ninja(\"Naruto\", 150, true)</code> et <code>Ninja(\"Sasuke\", 120, false)</code> retourne <code>2</code></li> </ul> </li> <li>Afficher le nom ninja qui a le plus de points de vie.<ul> <li>Par exemple: <code>Ninja(\"Naruto\", 150, true)</code> et <code>Ninja(\"Sasuke\", 120, false)</code> retourne <code>Naruto</code></li> </ul> </li> </ul> </li> </ol> Corrections <pre><code>using System.Reflection.Metadata;\nusing System.Reflection.PortableExecutable;\nusing System.Text;\n\nvoid RunQ1()\n{\n  void ShowEvenNumbers(List&lt;int&gt; numbers)\n  {\n    var evenNumbers = from n in numbers where n % 2 == 0 select n;\n    Console.WriteLine(string.Join(\",\", evenNumbers));\n  }\n  Console.WriteLine(\"Exercise 1\");\n  ShowEvenNumbers([1, 2, 3, 4, 5, 6, 7]);\n  // Enumerable.Range equivalent of Python range with less features\n  ShowEvenNumbers(Enumerable.Range(-10, 20).ToList());\n}\n\nvoid RunQ2()\n{\n  // Avec la method syntax\n  List&lt;int&gt; GetEvenNumbers(List&lt;int&gt; numbers)\n  {\n    var evenNumbers = numbers.Where(n =&gt; n % 2 == 0);\n    return evenNumbers.ToList();\n  }\n  // Avec la query syntax et avec un single statement function\n  List&lt;int&gt; GetEvenNumbers2(List&lt;int&gt; numbers) =&gt;\n    (from n in numbers where n % 2 == 0 select n).ToList();\n\n  List&lt;int&gt; numbers = Enumerable.Range(1, 10).ToList();\n  Console.WriteLine(\"Exercise 2\");\n  Console.WriteLine(string.Join(\",\", GetEvenNumbers(numbers)));\n  Console.WriteLine(string.Join(\",\", GetEvenNumbers2(numbers)));\n}\n\nvoid RunQ3()\n{\n  string GetConsonants(string input)\n  {\n    string lowerCased = input.ToLower();\n    var consonants = lowerCased.Where(c =&gt; !\"aeiuyo\".Contains(c));\n    return string.Join(\"\", consonants);\n  }\n\n  string GetConsonants2(string input) =&gt;\n    string.Join(\"\", input.ToLower().Where(c =&gt; !\"aeiuyo\".Contains(c)));\n  Console.WriteLine(\"Exercise 3\");\n  Console.WriteLine(GetConsonants(\"Hello\"));\n  Console.WriteLine(GetConsonants(\"BBBBCCCC\"));\n  Console.WriteLine(GetConsonants(\"aeae\"));\n  Console.WriteLine(GetConsonants2(\"Hello\"));\n  Console.WriteLine(GetConsonants2(\"BBBBCCCC\"));\n  Console.WriteLine(GetConsonants2(\"aeae\"));\n}\n\nvoid RunQ4()\n{\n  List&lt;int&gt; GetLengths(List&lt;string&gt; texts) =&gt;\n    (from text in texts select text.Length).ToList();\n  Console.WriteLine(\"Exercise 4\");\n  Console.WriteLine(string.Join(\", \", GetLengths([\"I\", \"Love\", \"C#\"])));\n  Console.WriteLine(string.Join(\", \", GetLengths([\"LINQ\", \"Rocks\"])));\n}\n\nvoid RunQ5()\n{\n  string ToCamelCaseName(string name)\n  {\n    var transformed = name.Select((c, index) =&gt; index == 0 || name[index - 1] == ' ' ? char.ToUpper(c) : c);\n    return string.Join(\"\", transformed);\n  }\n  void PrintResults(List&lt;Person&gt; persons)\n  {\n    Console.WriteLine($\"input list: {string.Join(\",\", persons)}\");\n    var olderThan18 = persons.Where(p =&gt; p.Age &gt; 18);\n    Console.WriteLine($\"Older than 18: {string.Join(\", \", olderThan18)}\");\n    var startWithAPersons = from p in persons where p.Name.Length &gt; 1 &amp;&amp; p.Name[0] == 'A' select p;\n    Console.WriteLine($\"Start with A: {string.Join(\", \", startWithAPersons)}\");\n    var camelCased = persons.Select(p =&gt; new Person(ToCamelCaseName(p.Name), p.Age));\n    Console.WriteLine($\"Camel cased: {string.Join(\", \", camelCased)}\");\n  }\n  List&lt;Person&gt; persons = [new(\"Kakashi\", 50), new(\"Arata\", 23), new(\"j bap\", 2)];\n  PrintResults(persons);\n  Random rng = new();\n  List&lt;Person&gt; randomPersons = Enumerable.Range(1, 5)\n    .Select(\n      i =&gt; new Person($\"person number {i}\", rng.Next(10, 30))\n    ).ToList();\n  PrintResults(randomPersons);\n}\n\nRunQ1();\nRunQ2();\nRunQ3();\nRunQ4();\nRunQ5();\n\nrecord Person(string Name, int Age);\n</code></pre>"},{"location":"dotnet-exercices/#fichiers","title":"Fichiers","text":"<ol> <li>Utiliser les <code>StreamReader</code> et / ou <code>StreamWriter</code> pour lire et un fichier et:<ul> <li>Afficher le nombre de caract\u00e8res de chaque ligne de ce fichier</li> <li>G\u00e9n\u00e8re un fichier qui ajoute un point \u00e0 la fin de chaque ligne du fichier d'origine si elle n'est pas d\u00e9j\u00e0 pr\u00e9sente</li> <li>G\u00e9n\u00e8re un fichier qui contient la ligne qui a le plus de caract\u00e8res dans le fichier lu</li> <li>G\u00e9n\u00e8re un fichier qui contient les lignes du fichier lu tri\u00e9s par ordre croissant le nombre de caract\u00e8res de la ligne</li> <li>G\u00e9n\u00e8re un fichier qui contient les lignes du fichier lu tri\u00e9s par ordre croissant du dictionnaire</li> </ul> </li> <li>Utiliser un <code>StreamWriter</code> pour \u00e9crire dans un fichier le contenu d'une cha\u00eene de caract\u00e8res au format pyramidal. Par exemple \"Je-fais-des-exos-de-C#\" donne le fichier (le dernier caract\u00e8re sera ignor\u00e9 car il ne permet pas de faire une pyramide):     <pre><code>J\ne-\nfai\ns-de\ns-exo\ns-de-C\n</code></pre></li> <li>D\u00e9finir votre propose classe de journalisation (<code>Logger</code>) qui va servir \u00e0 \u00e9crire des logs dans un fichier.<ul> <li>La classe prend en argument du constructeur le nom du fichier de logs</li> <li>La classe propose les m\u00e9thodes: <code>Info(String message)</code> et <code>Warn(String message)</code>. Chacune des m\u00e9thodes ajoute une ligne au fichier avec le format:<ul> <li>Si c'est une Info: <code>{date et heure actuelle} \u2139\ufe0f {message}</code></li> <li>Si c'est un Warn: <code>{date et heure actuelle} \u26a0\ufe0f {message}</code></li> </ul> </li> <li>\u26a0\ufe0f: Attention \u00e0 bien fermer le fichier une fois l'\u00e9criture du log faite (pour le lib\u00e9rer)</li> <li>Cr\u00e9er une instance de la classe <code>Logger</code> et ajouter quelques logs</li> <li>Ajouter les m\u00e9thodes <code>Error(String message)</code> et <code>Debug(String message)</code> avec un format adapt\u00e9 et bas\u00e9 sur le m\u00eame principe que les m\u00e9thodes d\u00e9finies plus haut.</li> <li>D\u00e9finir une m\u00e9thode <code>ShowAllWarnings()</code> qui affiche tous les logs de type <code>Warn</code> pr\u00e9sents dans le fichier de log.</li> <li>Est-ce que vous voyez des inconv\u00e9nients / contraintes avec cette m\u00e9thode de journalisation ?</li> </ul> </li> <li>Faire le probl\u00e8me 1 de advent of code 2023 en chargeant les donn\u00e9es d'entr\u00e9e depuis un fichier.<ul> <li>Par exemple pour l'exercice 1 du probl\u00e8me, cr\u00e9er \u00e0 la main (avec vscode ou l'explorateur) un fichier <code>input1.txt</code> avec le contenu ci-dessous et le lire avec un StreamReader pour r\u00e9soudre le probl\u00e8me. <pre><code>1abc2\npqr3stu8vwx\na1b2c3d4e5f\ntreb7uchet\n</code></pre></li> </ul> </li> </ol> Corrections <pre><code>static void PrintCountPerLine(string filePath)\n{\n  using StreamReader sr = new(filePath);\n  string? line = sr.ReadLine();\n  while (line != null)\n  {\n    Console.WriteLine(line.Length);\n    line = sr.ReadLine();\n  }\n}\n\nstatic void AddDotIfNotPresent(string filePath)\n{\n  using StreamReader sr = new(filePath);\n  using StreamWriter sw = new(\"dotted_file.txt\");\n  string? line = sr.ReadLine();\n  while (line != null)\n  {\n    if (!line.EndsWith('.'))\n    {\n      line += '.'; // autre fa\u00e7on: line = $\"{line}.\";\n    }\n    sw.WriteLine(line);\n    line = sr.ReadLine();\n  }\n}\n\nstatic void WriteLongestLine(string filePath)\n{\n  using StreamReader sr = new(filePath);\n  string? line = sr.ReadLine();\n  string? longestLine = line;\n  while (line != null)\n  {\n    line = sr.ReadLine();\n    if (longestLine?.Length &lt; line?.Length)\n    {\n      longestLine = line;\n    }\n  }\n  if (longestLine != null)\n  {\n    using StreamWriter sw = new(\"longest_line.txt\");\n    sw.WriteLine(longestLine);\n  }\n}\n\nstring filePath = \"input_file.txt\";\nPrintCountPerLine(filePath);\nAddDotIfNotPresent(filePath);\nWriteLongestLine(filePath);\n</code></pre>"},{"location":"dotnet-exercices/#serie-2-programmation-asynchrone","title":"S\u00e9rie 2 (programmation asynchrone)","text":"<p>En C#, la m\u00e9thode recommand\u00e9e pour ex\u00e9cuter des traitements asynchrones (qui sont mis en oeuvre habituellement avec les threads et les process) consiste \u00e0 utiliser \u201cTask.Run(() =&gt; { // traitement async })\u201d. On dit que c\u2019est une programmation asynchrone bas\u00e9e sur les t\u00e2ches.</p> <ol> <li>Cr\u00e9er deux t\u00e2ches asynchrones (en faisant deux Task.Run)<ul> <li>La premi\u00e8re affiche un valeur qui s\u2019incr\u00e9mente de 1 \u00e0 1000 (une boucle for qui affiche i \u00e0 chaque it\u00e9ration)</li> <li>La deuxi\u00e8me affiche un valeur qui va de -1 \u00e0 -1000 (une boucle for de -1 \u00e0 -1000 avec un writeline)</li> <li>Pour laisser le temps aux t\u00e2ches concurrentes de finir avant la fin du thread principal, ajouter un await Task.Delay(1000); \u00e0 la fin de la t\u00e2che principale</li> <li>Ex\u00e9cuter le programme plusieurs fois, que constatez vous ?</li> <li>Afficher <code>finished 1</code> juste \u00e0 la fin de la premi\u00e8re t\u00e2che (sans utiliser <code>await</code> et <code>ContinueWith</code>)</li> <li>-&gt; solution: utiliser une callback sous forme d\u2019une fonction pass\u00e9e en param\u00e8tre</li> <li>En utilisant <code>ContinueWith</code> afficher <code>finished 1</code> juste apr\u00e8s la fin de la premi\u00e8re t\u00e2che</li> <li>Remplacer chaque <code>Task.Run</code> par <code>await Task.Run</code>. Que constatez-vous ?</li> <li>En utilisant <code>await</code>, comment afficher \u201cfinished 2\u201d d\u00e8s la fin de la deuxi\u00e8me t\u00e2che ?</li> </ul> </li> <li>Dans la premi\u00e8re t\u00e2che, ajouter une instruction \u2018return \u201ctartatin\u201d;\u2019 apr\u00e8s la boucle for. Ensuite remplacer le premier <code>await Task.Run</code> par un var <code>result = await Task.Run</code>.<ul> <li>Quel est le type et la valeur de result ?</li> <li>Enlever await, c\u2019est \u00e0 dire remplacer <code>var result = await Task.Run</code> par <code>var result = Task.Run</code></li> <li>Quel est le type et la valeur de result ?</li> <li>A quoi sert <code>await</code> ? Quel est sa relation avec le type <code>Task</code> ?</li> </ul> </li> </ol>"},{"location":"dotnet/","title":"Le framework .Net","text":"<p>Le framework .Net et le framework officiel qui accompagne le langage C#.</p>"},{"location":"dotnet/#quest-ce-quun-framework","title":"Qu'est-ce qu'un framework ?","text":"<p>On peut voir un framework comme une librairie dont l'usage est structurant dans un projet. Ils proposent g\u00e9n\u00e9ralement:</p> <ul> <li>Des outils (par exemple un CLI)</li> <li>Des librairies et API</li> <li>Un documentation</li> <li>Des langages de programmation qu\u2019il supporte</li> </ul> <p>Il faut aussi s\u2019int\u00e9resser \u00e0 son:</p> <ul> <li>Prix</li> <li>Communaut\u00e9 et le support en cas de probl\u00e8me</li> <li>Documentation</li> </ul>"},{"location":"dotnet/#historique","title":"Historique","text":"<ul> <li>Avant les ann\u00e9es 2000, les seuls gros frameworks de MicroSoft sont les API Win32 et COM (qu'on peut coder en C++ et VB).<ul> <li>La sortie du JDK de Sun Microsystems a grandement am\u00e9lior\u00e9 l'exp\u00e9rience d\u00e9veloppeur. Microsoft a d'ailleurs d\u00e9velopp\u00e9 une d\u00e9clinaison personnalis\u00e9e (MSVM) qui a \u00e9t\u00e9 abandonn\u00e9e suite au proc\u00e8s contre SUN.</li> </ul> </li> <li>2000: MicroSoft lance .Net et \u201c.Net Framework\u201c 1.0 (C#, VB) mais qui ne sont compatibles qu'avec Windows.<ul> <li>Le code source du framework est en C++.</li> </ul> </li> <li>2004: Sortie de Mono qui est un portage .Net pour Linux OSS (Open Source) ind\u00e9pendant de MicroSoft.</li> <li>2013: Microsoft d\u00e9clare durant la conf\u00e9rence Build (Apple: WWDC, Google: Google IO) son souhait de faire de l'Open Source avec la fameuse citation: Microsoft\u2665\ufe0fLinux.</li> <li>Depuis 2014: Cr\u00e9ation de Fondation .Net et sortie de projets .Net en OSS</li> <li>.Net Core (octobre 2014), EFCore, MSBuild, VSCode, .NetStandard, etc.</li> <li>Fin 2020, sortie de .Net 5 et abandon du terme .Net Core en faveur de .Net tout court</li> </ul> <p>.Net et .Net Framework sont deux frameworks diff\u00e9rents</p> <p>Bien qu'ayant des classes et fonctions communtes, .Net Framework et .Net sont deux frameworks diff\u00e9rents. Le premier est d\u00e9pr\u00e9ci\u00e9 et n'est compatible qu'avec Windows. Le deuxim\u00e8e est d'actualit\u00e9 et est multiplatforme.</p>"},{"location":"dotnet/#quelques-apis","title":"Quelques APIs","text":"<ul> <li>Types primitifs: System.Boolean and System.Int32, etc.</li> <li>Collections: System.Collections.Generic.List, System.Collections.Generic.Dictionary, etc.<ul> <li>Les collection d\u00e9signent les structures de donn\u00e9es ou les types qui stockent un ensemble de donn\u00e9es. Exemples: tableau, listes, dictionnaire (Map), ensembles (Set), cha\u00eene de caract\u00e8res</li> </ul> <li>Types utilitaires: System.Net.Http.HttpClient, System.IO.FileStream, etc.</li> <li>Data types, such as System.Data.DataSet, and System.Data.Entity.DbSet.</li> <li>High-performance types, such as System.Span, System.Numerics.Vector, and Pipelines"},{"location":"dotnet/#langages-du-net","title":"Langages du .Net","text":"<ul> <li>.Net supporte officiellement C# et F#</li> <li>F# : langage fonctionnel pure d\u00e9velopp\u00e9 par Microsoft</li> <li>C# : langage de programmation d\u00e9velopp\u00e9 par Microsoft (inspir\u00e9 de Java et C++ \u00e0 la base et s\u2019inspire encore d\u2019autres langages)</li> <li>Le langage C# est le plus utilis\u00e9 en .net</li> </ul>"},{"location":"dotnet/#collections","title":"Collections","text":"<p>.Net fournit les types de collections courantes et des m\u00e9thodes pour les manipuler. Il propose m\u00eame des fonctionnalit\u00e9s int\u00e9ressantes comme l'indexation \u00e0 l'envers et par intervalle.</p> <pre><code>// See https://aka.ms/new-console-template for more information\nList&lt;string&gt; messages = [\"I\", \"Love\", \"C#\"];\nmessages.Add(\"in 2024\");\nConsole.WriteLine(messages[0]);\n// ^ -&gt; indexation invers\u00e9e\nConsole.WriteLine(messages[^1]);\nConsole.WriteLine(messages);\n// string.Join Pour afficher proprement\nConsole.WriteLine(string.Join(\" $ \", messages));\nConsole.WriteLine(string.Join(\" - \", messages[1..3]));\nConsole.WriteLine(string.Join(\" - \", messages[1..^1]));\n// i..j -&gt; extraction de la sous-liste de l'indice i \u00e0 l'indice j-1\nvar subMessages = messages[1..3];\nConsole.WriteLine(subMessages[0]);\n\nforeach (var message in messages)\n{\n  Console.Write($\"{message} \");\n}\nConsole.WriteLine();\n\nforeach (var c in \"Hello\")\n{\n  Console.WriteLine($\"Current char {c}\");\n}\n\n// List of ints\nList&lt;int&gt; numbers = [5, -9, 2, 3];\nConsole.WriteLine(string.Join(\" - \", numbers));\n\n// Lists can contain any type. Here we use a record\nHero h1 = new(\"Lapin de Gar\u00e8ne\", 100);\nList&lt;Hero&gt; heroes = [h1, new(\"Raze\", 90)];\nConsole.WriteLine($\"Name of the 1st hero: {heroes[0].Name}\");\nConsole.WriteLine(string.Join(\" - \", heroes));\n\nList&lt;Hero2&gt; secondHeroes = [new() { Name = \"Siraka\", Hp = 50 }, new() { Name = \"Malfait\", Hp = 80 }];\nConsole.WriteLine(string.Join(\" - \", secondHeroes));\n\nrecord Hero(string Name, int Hp);\n\nclass Hero2\n{\n  public required string Name { get; set; }\n  public required int Hp { get; set; }\n\n  public override string ToString() =&gt; $\"Name: {Name}, HP: {Hp}\";\n}\n</code></pre>"},{"location":"dotnet/#linq","title":"LINQ","text":"<p>LINQ fournit des fonctions et des mots-cl\u00e9s permettant de manipuler des collections de donn\u00e9es. LINQ est un acronyme pour Language Integrated Query. Deux syntaxes sont possible: la syntaxe de requ\u00eate (ressemble \u00e0 du SQL) et la syntaxe de m\u00e9thode (ressemble aux m\u00e9thodes fitler map et reduce qu'on trouve dans d'autres langages).</p> <pre><code>List&lt;int&gt; numbers = [1, 2, 3, 4, 5, 6];\n// cr\u00e9er une liste qui contient le double des nombres impairs\nList&lt;int&gt; resultNumbers = [];\nforeach (var n in numbers)\n{\n  if (n % 2 == 1)\n  {\n    resultNumbers.Add(n * 2);\n  }\n}\nConsole.WriteLine(string.Join(\", \", resultNumbers));\n\nbool isOdd(int n) =&gt; n % 2 == 0;\nFunc&lt;int, bool&gt; isOdd2 = n =&gt; n % 2 == 1;\n// LINQ Method syntax:\nvar oddNumbers = numbers.Where(n =&gt; n % 2 == 1);\nvar oddNumbers2 = numbers.Where(isOdd2);\nvar oddNumbers3 = numbers.Where(isOdd);\nConsole.WriteLine(string.Join(\", \", oddNumbers));\n\nvar doubleOddNumbers = oddNumbers.Select((n) =&gt; n * 2);\nConsole.WriteLine(string.Join(\", \", doubleOddNumbers));\n\nvar resultNumbers2 = numbers.Where(n =&gt; n % 2 == 1).Select(n =&gt; n * 2);\nConsole.WriteLine(string.Join(\", \", resultNumbers2));\n// With LINQ, we can add optimisations easily\nvar resultNumbers3 = numbers.AsParallel()\n                            .Where(n =&gt; n % 2 == 1)\n                            .Select(n =&gt; n * 2);\n\n// LINQ query syntax: resultNumbers4 is translated (intenally) into resultNumbers2\nvar resultNumbers4 = from n in numbers where n % 2 == 1 select n * 2;\n\n// G\u00e9n\u00e9rer un tableau al\u00e9atoire de 6 entier\nRandom rng = new();\nvar randomNumbers = Enumerable.Range(1, 10).Select(n =&gt; rng.Next(-10, 10)).ToList();\nConsole.WriteLine($\"Random numbers {string.Join(\", \", randomNumbers)}\");\nConsole.WriteLine(@$\"\nSum: {randomNumbers.Sum()} or {randomNumbers.Aggregate((agg, cur) =&gt; agg + cur)}\nMutliply all elements: {randomNumbers.Aggregate(1, (agg, cur) =&gt; agg * cur)}\nAverage: {randomNumbers.Average()}\nMax: {randomNumbers.Max()} or {randomNumbers.Aggregate((agg, cur) =&gt; agg &gt; cur ? agg : cur)}\nMin: {randomNumbers.Min()} or {randomNumbers.Aggregate((agg, cur) =&gt; agg &lt; cur ? agg : cur)}\n\");\n</code></pre>"},{"location":"dotnet/#fichiers","title":"Fichiers","text":"<ul> <li>C# propose plusieurs fa\u00e7ons de manipuler des fichiers</li> <li>Les classes <code>StreamReader</code> et <code>StreamWriter</code> permettent de manipuler les fichiers sous forme de flux de donn\u00e9es synchrones.</li> <li>Il existe aussi des m\u00e9thodes utilitaires pour lire et \u00e9crire le contenu du fichier en une fois sans passer pas des streams. La Doc de C# montre comment effectuer les t\u00e2ches communes</li> </ul> <p>Les streams</p> <ul> <li>Un <code>Stream</code> (ou flux en Fran\u00e7ais) permet de manipuler des donn\u00e9es au fur et \u00e0 mesure (sans avoir \u00e0 les charger int\u00e9gralement en m\u00e9moire)</li> <li>L'avantage des streams et qu'ils permettent consommer g\u00e9n\u00e9ralement moins de m\u00e9moire et qu'il permettent de commencer \u00e0 traiter plus rapidement la donn\u00e9es car on n'est pas oblig\u00e9 d'attendre </li> <li>Les streams sont donc pariculi\u00e8rement utile quand on veut traveiller avec des fichiers ou si on fait du r\u00e9seau car les temps d'acc\u00e8s sont moins rapides qu'un</li> <li>Par contre, la donn\u00e9es est d\u00e9j\u00e0 int\u00e9gralement charg\u00e9e en m\u00e9moire, les streams ne sont pas pertinents.</li> </ul> <pre><code>StreamReader sr = new(\"hello.txt\");\n\nConsole.WriteLine(sr.ReadLine());\nConsole.WriteLine((char)sr.Read());\nConsole.WriteLine((char)sr.Read());\nConsole.WriteLine((char)sr.Peek());\n// Don't forget to close the stream to free it\nsr.Close();\n\n// With using, sr2 will be automatically closed at the end\nusing (StreamReader sr2 = new(\"hello.txt\"))\n{\n  string? line = sr2.ReadLine();\n  while (line != null)\n  {\n    Console.WriteLine($\"Ligne r\u00e9cupr\u00e9e: {line}\");\n    line = sr2.ReadLine();\n  }\n}\n\nusing (StreamWriter sw = new(\"test.txt\"))\n{\n  sw.WriteLine(\"Hello\");\n  sw.Write(\" tout le monde\");\n  sw.WriteLine(\"J'aime\");\n  sw.WriteLine(\"Le C#\");\n}\n\n// Raccourci pour lire tout le contenu d'un fichier\nstring fileContent = File.ReadAllText(\"test.txt\");\nConsole.WriteLine(fileContent);\n</code></pre>"},{"location":"dotnet/#programmation-asynchrone","title":"Programmation asynchrone","text":"<ul> <li>Pour chaque programme que vous lancez, un processus est cr\u00e9\u00e9<ul> <li>Un processus est lanc\u00e9 avec un seul thread au d\u00e9marrage et peut en g\u00e9rer plusieurs par la suite</li> </ul> </li> <li>Les processus et les threads s\u2019ex\u00e9cutent de fa\u00e7on asynchrone (on dit aussi, de fa\u00e7on concurrente)<ul> <li>En g\u00e9n\u00e9ral, on cr\u00e9e des Thread avec un <code>new Thread()</code> ou une syntaxe similaire selon le langage</li> <li>Dans un processeur avec un seul noyau (single core), les threads s'ex\u00e9cutent sur le m\u00eame noyau</li> <li>Dans un processeur avec plusieurs noyaux (single core), les threads peuvent s'ex\u00e9cutent sur des noyaux diff\u00e9rents. On parle alors de programmation parall\u00e8le</li> </ul> </li> <li>Cependant, les processus et les threads sont des fonctionnalit\u00e9s g\u00e9r\u00e9s au niveau de votre OS et non au niveau du langage et son runtime<ul> <li>Cela rend leur manipulation et optimisation un peu compliqu\u00e9e</li> </ul> </li> <li>C'est pour cela que certains langages proposent leur propre approche de programmation asynchrone<ul> <li>Cela permet de proposer un mod\u00e8le de programmation plus simple et des optimisation plus faciles</li> </ul> </li> <li>En C#, le mod\u00e8le de programmation asynchrone repose sur les t\u00e2ches asynchrones (ou <code>async Tasks</code>)</li> </ul>"},{"location":"maui/","title":"MAUI","text":"<pre><code># Windows\ndotnet workload install maui --source https://api.nuget.org/v3/index.json\n# macOS\nsudo dotnet workload install maui --source https://api.nuget.org/v3/index.json\n# Create a new projet\ndotnet new maui -n \"MyMauiApp\"\n</code></pre>"},{"location":"monogame/","title":"D\u00e9veloppement de jeux 2D avec monogame","text":""},{"location":"monogame/#modele-de-developpement-avec-monogame","title":"Mod\u00e8le de d\u00e9veloppement avec Monogame","text":"<ul> <li>Le d\u00e9veloppement de jeux avec Monogame repose sur l'ex\u00e9cution d'une boucle infinie qui ex\u00e9cute 60 it\u00e9ration par seconde (pour avoir un jeu en 60 fps)<ul> <li>Ce mod\u00e8le peut \u00eatre retrouv\u00e9 dans d'autres frameworks de jeux</li> </ul> </li> <li>Chaque it\u00e9ration effectue les actions suivantes:<ol> <li>Lire les touches du clavier</li> <li>Mettre \u00e0 jour la logique du jeu</li> <li>Afficher le rendu de l'image actuelle</li> </ol> </li> <li>Le framework Monogame permet au d\u00e9veloppeur de personnaliser le comportement des \u00e9tapes 2 et 3.<ul> <li>Cela veut dire que l'on peut coder ce qui se passe sur chaque image (ou frame) et afficher ce qu'on veut \u00e0 chaque image (frame)</li> </ul> </li> <li>Voici une repr\u00e9sentation en pseudo-code</li> </ul> <pre><code>var game = new Game();\ngame.Initialize(); // *\ngame.LoadContent(); // *\nwhile (true){\n    game.readInput();\n    game.Update(); // *\n    game.Draw(); // *\n}\n// *: peuvent \u00eatre personnalis\u00e9s (ou surcharg\u00e9s) avec l'h\u00e9ritage\n</code></pre>"},{"location":"monogame/#lexique-monogame","title":"Lexique monogame","text":"<ul> <li>Sprite: tout \u00e9l\u00e9ment dans l'\u00e9cran (personnage, ennemis, d\u00e9cors, etc.).</li> <li><code>Texture2D</code>: c'est le rendu associ\u00e9 \u00e0 un sprite.<ul> <li>Par exemple: si on prend le sprite de Mario, alors sa Texture2D contiendra le dessin du personnage \u00e0 moustache.</li> <li>Par exemple: si on prend le premier niveau du jeu Super Mario Bros, alors sa Texture2D contiendra le dessin du terrain, des obstacles, du ciel, des herbes et des nuages.</li> </ul> </li> <li>On peut consid\u00e9rer un sprite comme un rectangle avec un rendu charg\u00e9 depuis une Texture2D.</li> <li><code>SpriteBatch</code>: une classe qui g\u00e8re et dessine \u00e0 l'\u00e9cran un ensemble de sprites<ul> <li>Par exemple: le <code>SpriteBatch</code> du premier niveau de Super Mario Bros contiendrait les sprites de: Mario, les ennemies (Goombas et Paratroopers), terrain principal, sous-terrain, le drapeau, les blocs, les bonus et le HUD (Heads Up Display) (Score, vies, temps).</li> </ul> </li> <li>Fichier <code>mgcb</code>: Fichier contenant les ressources d'un jeu Monogame (textures, sons, etc.)</li> </ul>"},{"location":"monogame/#premiers-pas-avec-monogame","title":"Premiers pas avec Monogame","text":"<ul> <li>Ajout du mod\u00e8le de projet: <code>dotnet new install MonoGame.Templates.CSharp</code></li> <li>V\u00e9rifier qie le mod\u00e8le a \u00e9t\u00e9 ajout\u00e9 avec un <code>dotnet new list</code></li> <li>Cr\u00e9er le projet: <code>dotnet new mgdesktopgl -o first-game</code></li> <li><code>cd first-game</code></li> <li>V\u00e9rifier dans csproj que TargetFramework est la derni\u00e8re version du framework .net</li> <li>Lancer: <code>dotnet restore</code></li> <li>Puis: <code>dotnet run</code></li> </ul>"},{"location":"monogame/#exercice-deux-carres-et-intersection","title":"Exercice: deux carr\u00e9s et intersection","text":"<ul> <li>Cr\u00e9er un jeu monogame qui affiche deux carr\u00e9s</li> <li>Le premier est situ\u00e9 au centre et est statique</li> <li>Le deuxi\u00e8me est plac\u00e9 al\u00e9atoirement dans l\u2019\u00e9cran et est contr\u00f4l\u00e9 par le joueur</li> <li>Associer une texture sous forme d'une couleur \u00e0 chacun des carr\u00e9s</li> <li>Lorsque les deux carr\u00e9s se touchent l\u2019arri\u00e8re-plan devient rouge, sinon il est bleu</li> <li>Le score du joueur augmente \u00e0 chaque frame de 1 point si les carr\u00e9s ne se touche pas, et il baisse de 5 points par frame s\u2019il se touchent</li> <li>Afficher le score en temps r\u00e9el</li> <li>Faire d\u00e9placer le premier carr\u00e9 al\u00e9atoirement de fa\u00e7on fluide (il ne faut pas qu\u2019il se t\u00e9l\u00e9porte)</li> </ul>"},{"location":"monogame/#fichier-mgcb","title":"Fichier mgcb","text":"<ul> <li>Un fichier mgcb permet de contenir, de fa\u00e7on optimale, les ressources d\u2019un jeu XNA / MonoGame</li> <li>Afin de manipuler ce fichier, il faut installer deux outils<ul> <li>Un \u00e9diteur pour ajouter des ressources: <code>mgcb</code></li> <li>Un compilateur pour qu\u2019il puisse \u00eatre optimis\u00e9 pour l\u2019ex\u00e9cution: <code>mgcb-editor-(platforme)</code></li> </ul> </li> <li>Pour installer correctement le compilateur, il faut d\u2019abord avoir un fichier .config/dotnet-tools.json dans son projet avec la commande <code>dotnet new tool-manifest</code></li> <li>Installer le compilateur: <code>dotnet tool install dotnet-mgcb</code> (il sera lanc\u00e9 automatiquement lorsqu'on fera <code>dotnet run</code>)</li> <li>Installer l\u2019\u00e9diteur pour windows: <code>dotnet tool install dotnet-mgcb-editor</code></li> <li>Puis le lancer en lan\u00e7ant la commande <code>dotnet mgcb-editor</code></li> <li>Un fois l\u2019\u00e9diteur ouvert, cr\u00e9er un nouveau mgcb dans <code>[racine du projet]/Content/Content.mgcb</code></li> <li>Vous pouvez suivre ce guide pour voir comment ajouter et charger des ressources</li> </ul>"},{"location":"monogame/#animations","title":"Animations","text":"<ul> <li>monogameextended propose de simplifier l'animation des sprites.</li> </ul>"}]}